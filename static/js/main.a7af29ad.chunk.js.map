{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","jump","state","username","posts","e","console","log","target","getAttribute","link","window","location","href","_this2","axios","get","then","res","data","children","map","obj","setState","react_default","a","createElement","className","id","data-url","onClick","src","post","key","title","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yNCwGzBC,cAzFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAKU,KAAOV,EAAKU,KAAKF,KAAVP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACZA,EAAKW,MAAQ,CACXC,SAAU,GACVC,MAAO,IANQb,iHAmBdc,GACHC,QAAQC,IAAIF,EAAEG,OAAOC,aAAa,aAClC,IAAIC,EAAKL,EAAEG,OAAOC,aAAa,YAC/BE,OAAOC,SAASC,KAAOH,wCAGV,IAAAI,EAAApB,KAGbqB,IAAMC,IAAN,wCACCC,KAAK,SAAAC,GACJ,IAAMd,EAAQc,EAAIC,KAAKA,KAAKC,SAASC,IAAI,SAAAC,GAAG,OAAIA,EAAIH,OACpDL,EAAKS,SAAS,CAAEnB,UAChBE,QAAQC,IAAIH,sCAKd,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEjBH,EAAAC,EAAAC,cAAA,WAASC,UAAU,UAAUC,GAAG,WAE5BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,GAAG,QAAQC,WAAS,0DAA8DC,QAASpC,KAAKO,MACpHuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAaH,EAAAC,EAAAC,cAAA,OAAKK,IAAI,4BACrCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAASH,EAAAC,EAAAC,cAAA,kCAAcF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAgBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAC9EH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,iGAoBhBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASG,QAASpC,KAAKI,aAAzC,YAGA0B,EAAAC,EAAAC,cAAA,SAAIhC,KAAKQ,MAAMC,UAETqB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGhC,KAAKQ,MAAME,MAAMiB,IAAI,SAAAW,GAAI,OACxBR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,EAAKJ,IAAKI,EAAKE,mBA3ElBC,aCFEC,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.a7af29ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\n\n\n\n\n\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.jump = this.jump.bind(this);\n    this.state = {\n      username: '',\n      posts: [],\n    }\n  }\n\n  componentDidMount() {\n    // axios.get(`http://www.reddit.com/r/reactjs.json`)\n    //   .then(res => {\n    //     const posts = res.data.data.children.map(obj => obj.data);\n    //     this.setState({ posts });\n    //     console.log(posts);\n    //   });\n  }\n\n  jump(e){\n    console.log(e.target.getAttribute('data-url'))\n    let link=e.target.getAttribute('data-url');\n    window.location.href = link;\n  }\n\n  handleClick () {\n    //axios.get('https://api.github.com/users/maecapozzi').then(response => this.setState({username: response.data.name}))\n\n    axios.get(`http://www.reddit.com/r/reactjs.json`)\n    .then(res => {\n      const posts = res.data.data.children.map(obj => obj.data);\n      this.setState({ posts });\n      console.log(posts);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n    <section className=\"content\" id=\"speed_s\">\n\n        <div className=\"item-s\" id=\"51dai\" data-url=\"https://web.u51.com/tregister/#/?id=7&amp;channel=wdpt_ssj \" onClick={this.jump}>\n            <div className=\"loan-logo \"><img src=\"51dai1514276452174.png\" /></div>\n            <div className=\"loan-li\">\n                <p className=\"loan-t\"><em>51人品贷</em><i className=\"icon-img \"></i><i className=\"icon-img \"></i></p>\n                <p className=\"clear\">消费贷（纯线上、无抵押无担保）</p>\n            </div>\n        </div>\n        {/* <div className=\"item-s\" id=\"baiduyouqianhua2\" data-url=\"https://icash.baidu.com/cloan/operation/activity?activityName=channelBrand&amp;CH=jmall&amp;fr=jmall_list9\" onClick={this.jump.bind(this)}>\n            <div className=\"loan-logo \"><img src=\"baiduyouqianhua21513932879307.png\" /></div>\n            <div className=\"loan-li\">\n                <p className=\"loan-t\"><em>百度·有钱花</em><i className=\"icon-img \"></i><i className=\"icon-img \"></i></p>\n                <p className=\"clear\">大额现金贷，低息审批快</p>\n            </div>\n        </div>\n        <div className=\"item-s\" id=\"chaorenka\" data-url=\"https://xbdapp.chainfin.com/loanApp/s/24067\" onClick={this.jump.bind(this)}>\n            <div className=\"loan-logo \"><img src=\"chaorenka1519988681917.png\" /></div>\n            <div className=\"loan-li\">\n                <p className=\"loan-t\"><em>超人卡</em><i className=\"icon-img \"></i><i className=\"icon-img \"></i></p>\n                <p className=\"clear\">1天到账，高至20万额度</p>\n            </div>\n        </div> */}\n\n    </section>\n\n<button className='button' onClick={this.handleClick}>\n  Click Me\n</button>    \n<p>{this.state.username}</p>\n\n      <div>\n        <ul>\n          {this.state.posts.map(post =>\n            <li key={post.id}>{post.title}</li>\n          )}\n        </ul>\n      </div>\n\n\n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}